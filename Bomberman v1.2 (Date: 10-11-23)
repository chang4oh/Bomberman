import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Initialize Pygame mixer
pygame.mixer.init()

# Set up the game window
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Bomberman Game")

# Set the background color to dark green
BACKGROUND_COLOR = (0, 100, 0)

# Load game assets (graphics, sounds, music)
player_image = pygame.image.load("player.png")
enemy_image = pygame.image.load("enemy.png")
wall_image = pygame.image.load("wall.png")
bomb_image = pygame.image.load("bomb.png")

# Load menu music
menu_music = pygame.mixer.Sound("menu_music.mp3")  # Replace with your menu music file's path

# Load and play background music
background_music = pygame.mixer.Sound("background_music.mp3")
background_music.play(-1)  # Loop the background music indefinitely

# Load explosion sound
explosion_sound = pygame.mixer.Sound("explosion.wav")  # Replace with your sound file's path

# Load explosion images
explosion_images = [pygame.image.load("explosion_frame1.png"),
                   pygame.image.load("explosion_frame2.png"),
                   pygame.image.load("explosion_frame3.png")]

# Define game entities (player, enemies, walls, bombs, power-ups)
player = pygame.Rect(50, 50, player_image.get_width(), player_image.get_height())
enemies = []
walls = []
bombs = []
explosion_sound_playing = False  # Flag for explosion sound

# Game variables
score = 0
game_over = False
PLAYER_SPEED = 1  # Reduced player speed
ENEMY_SPEED = 1  # Enemy speed adjusted
explosion_radius = 50
ghost_speed = 1  # Adjust ghost speed

# Bomb variables
BOMB_TIMER = 3000
bomb_timer = BOMB_TIMER
BOMB_COOLDOWN = 1000
can_drop_bomb = True

# Define a font for UI text
font = pygame.font.Font(None, 36)

# Define enemy movement directions (up, down, left, right)
enemy_directions = [(0, -ENEMY_SPEED), (0, ENEMY_SPEED), (-ENEMY_SPEED, 0), (ENEMY_SPEED, 0)]

# Define a variable for the player's bombs
player_bombs = []

# Function to update bomb timers and handle explosions
def update_bombs():
    global player_bombs, explosion_radius, explosion_sound, explosion_sound_playing

    for bomb in player_bombs:
        # Decrease the bomb timer
        bomb_timer = pygame.time.get_ticks() - bomb['placed_time']
        if bomb_timer >= BOMB_TIMER:
            # Explosion time! Remove the bomb and create an explosion
            player_bombs.remove(bomb)
            explode(bomb['rect'].center)

# Function to create an explosion
def explode(center):
    global enemies, score, explosion_radius, explosion_sound, explosion_sound_playing

    # Play the explosion sound
    if not explosion_sound_playing:
        explosion_sound.play()
        explosion_sound_playing = True

    for enemy in enemies[:]:
        if pygame.Rect(enemy).colliderect(center[0] - explosion_radius, center[1] - explosion_radius,
                                      explosion_radius * 2, explosion_radius * 2):
            enemies.remove(enemy)
            score += 1

# Function to create a new game level with increased difficulty
def create_level(level):
    global player, enemies, walls, ghost_speed

    walls.clear()
    enemies.clear()

    for _ in range(20 + level * 5):
        wall = pygame.Rect(random.randint(0, WIDTH - wall_image.get_width()),
                           random.randint(0, HEIGHT - wall_image.get_height()),
                           wall_image.get_width(),
                           wall_image.get_height())
        walls.append(wall)

    for _ in range(level * 2):
        enemy = pygame.Rect(random.randint(0, WIDTH - enemy_image.get_width()),
                            random.randint(0, HEIGHT - enemy_image.get_height()),
                            enemy_image.get_width(),
                            enemy_image.get_height())
        while any(wall.colliderect(enemy) for wall in walls):
            enemy.x = random.randint(0, WIDTH - enemy_image.get_width())
            enemy.y = random.randint(0, HEIGHT - enemy_image.get_height())
        enemies.append(enemy)

    ghost_speed = 1 + level * 0.25

    player.x = WIDTH // 2 - player.width // 2
    player.y = HEIGHT // 2 - player.height // 2
    while any(player.colliderect(wall) for wall in walls) or any(player.colliderect(enemy) for enemy in enemies):
        player.x = random.randint(0, WIDTH - player.width)
        player.y = random.randint(0, HEIGHT - player.height)

class Menu:
    def __init__(self):
        self.items = ["Start Game", "Options", "Credits", "Quit Game"]
        self.selected_item = 0
        self.font = pygame.font.Font(None, 36)
        self.visible = True
        self.menu_music_playing = False
        self.background_music_playing = False

    def draw(self, screen):
        if self.visible:
            for i, item in enumerate(self.items):
                text = self.font.render(item, True, (255, 255, 255) if i == self.selected_item else (100, 100, 100))
                screen.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT // 2 - len(self.items) * 20 + i * 40))

    def handle_event(self, event):
        if self.visible:
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_DOWN:
                    self.selected_item = (self.selected_item + 1) % len(self.items)
                elif event.key == pygame.K_UP:
                    self.selected_item = (self.selected_item - 1) % len(self.items)
                elif event.key == pygame.K_RETURN:
                    self.select_item()

    def select_item(self):
        if self.selected_item == 0:
            self.start_game()
        elif self.selected_item == 1:
            pass  # Implement options screen (if desired)
        elif self.selected_item == 2:
            pass  # Implement credits screen (if desired)
        elif self.selected_item == 3:
            pygame.quit()
            sys.exit()

    def start_game(self):
        self.visible = False
        self.stop_menu_music()
        self.play_background_music()
        resume_game()

    def play_menu_music(self):
        if not self.menu_music_playing:
            pygame.mixer.stop()  # Stop all music (including background music)
            menu_music.play(-1)
            self.menu_music_playing = True

    def stop_menu_music(self):
        pygame.mixer.stop()  # Stop menu music

    def play_background_music(self):
        if not self.background_music_playing:
            background_music.play(-1)  # Play background music
            self.background_music_playing = True

def resume_game():
    global game_over
    game_over = False

# MAIN GAME LOOP
menu = Menu()
current_level = 1
in_menu = True
game_started = False
game_elements_visible = False
current_level = 1

last_frame_time = pygame.time.get_ticks()

# MAIN GAME # MAIN GAME# MAIN GAME # MAIN GAME# MAIN GAME # MAIN GAME# MAIN GAME # MAIN GAME
# MAIN GAME # MAIN GAME # MAIN GAME # MAIN GAME # MAIN GAME # MAIN GAME # MAIN GAME # MAIN GAME
while True:
    # DONT REMOVE THIS OR ELSE GREEN SCREEN
    pygame.display.update()
    update_bombs()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    if in_menu:
        menu.handle_event(event)

    if in_menu:
        screen.fill(BACKGROUND_COLOR)
        menu.draw(screen)
        menu.play_menu_music()

        if menu.selected_item == 0 and event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
            game_started = True
            menu.stop_menu_music()
            in_menu = False
            game_elements_visible = True
            current_level = 1
            create_level(current_level)
            background_music.play(-1)  # Background music starts when the game begins

        pygame.display.flip()
        pygame.time.delay(50)

    if game_elements_visible and not game_over:
        screen.fill(BACKGROUND_COLOR)

        for wall in walls:
            screen.blit(wall_image, (wall.x, wall.y))
        for enemy in enemies:
            screen.blit(enemy_image, (enemy.x, enemy.y))
        screen.blit(player_image, (player.x, player.y))

        keys = pygame.key.get_pressed()

        if keys[pygame.K_LEFT] or keys[pygame.K_a]:
            player.x -= PLAYER_SPEED
        elif keys[pygame.K_RIGHT] or keys[pygame.K_d]:
            player.x += PLAYER_SPEED
        elif keys[pygame.K_UP] or keys[pygame.K_w]:
            player.y -= PLAYER_SPEED
        elif keys[pygame.K_DOWN] or keys[pygame.K_s]:
            player.y += PLAYER_SPEED

        player.x = max(0, min(player.x, WIDTH - player.width))
        player.y = max(0, min(player.y, HEIGHT - player.height))

        for wall in walls:
            if player.colliderect(wall):
                if player.x < wall.x:
                    player.right = wall.left
                elif player.x > wall.x:
                    player.left = wall.right
                if player.y < wall.y:
                    player.bottom = wall.top
                elif player.y > wall.y:
                    player.top = wall.bottom

        for enemy in enemies:
            enemy_direction = random.choice(enemy_directions)
            enemy.x += enemy_direction[0] * ENEMY_SPEED
            enemy.y += enemy_direction[1] * ENEMY_SPEED
            if player.colliderect(enemy):
                game_over = True

        # Check for player input (bomb drop)
        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE] and can_drop_bomb:
            bomb = {'rect': pygame.Rect(player.x, player.y, bomb_image.get_width(), bomb_image.get_height()), 'placed_time': pygame.time.get_ticks()}
            player_bombs.append(bomb)
            can_drop_bomb = False

        # Define the sizes of each explosion frame
        explosion_frame_sizes = [(32, 32), (48, 48), (64, 64)]  # Adjust the sizes as needed

        # Initialize the explosion frame index
        explosion_frame_index = 0

        # Inside your game loop:
        # Inside your game loop:
        for bomb in player_bombs:
            bomb_timer = pygame.time.get_ticks() - bomb['placed_time']

            # Handle bomb explosion
            if bomb_timer >= BOMB_TIMER:
                player_bombs.remove(bomb)
                explosion_sound.play()  # Play the explosion sound
                # Remove enemies near the exploded bomb
                enemies = [enemy for enemy in enemies if
                           pygame.math.Vector2(enemy.center).distance_to(bomb['rect'].center) > explosion_radius]
            else:
                screen.blit(bomb_image, (bomb['rect'].x, bomb['rect'].y))

                # Handle bomb explosion animation
                if bomb_timer >= BOMB_TIMER - 500:  # Display the explosion animation for 500 milliseconds
                    if explosion_frame_index < 3:  # There are 3 frames of explosion
                        explosion_frame_size = explosion_frame_sizes[explosion_frame_index]
                        explosion_frame = pygame.transform.scale(explosion_images[explosion_frame_index],
                                                                 explosion_frame_size)
                        screen.blit(explosion_frame, (bomb['rect'].x, bomb['rect'].y))
                        explosion_frame_index += 1  # Move to the next frame
                    else:
                        explosion_frame_index = 0  # Reset the frame index after playing all frames

        # Allow the player to set a new bomb if they have no bombs
        if not player_bombs:
            keys = pygame.key.get_pressed()
            if keys[pygame.K_SPACE]:
                bomb = player.copy()
                bomb_timer = BOMB_TIMER
                player_bombs.append({'rect': bomb, 'placed_time': pygame.time.get_ticks()})

        if not enemies:
            # Create a new level
            current_level += 1
            create_level(current_level)

    if game_over and not menu.visible:
        game_over_text = font.render("Game Over", True, (255, 0, 0))
        screen.blit(game_over_text, (WIDTH // 2 - 100, HEIGHT // 2 - 50))

        final_score_text = font.render(f"Final Score: {score}", True, (255, 255, 255))
        screen.blit(final_score_text, (WIDTH // 2 - 100, HEIGHT // 2 + 20))

        retry_button = font.render("Retry", True, (255, 255, 255))
        menu_button = font.render("Menu", True, (255, 255, 255))

        screen.blit(retry_button, (WIDTH // 2 - 100, HEIGHT // 2 + 80))
        screen.blit(menu_button, (WIDTH // 2 - 100, HEIGHT // 2 + 120))

        pygame.display.flip()
        pygame.time.delay(50)
